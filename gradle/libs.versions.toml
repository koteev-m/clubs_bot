[versions]
# Kotlin and related toolchain
kotlin = "2.2.21"
ktor = "3.3.1"
serialization = "1.7.1"
exposed = "0.49.0"
hikari = "5.1.0"

# DB / Migrations
flyway = "11.14.0"          # Flyway 10.x + модуль Postgres (поддержка PG16)
postgres = "42.7.8"         # JDBC driver
h2 = "2.2.224"

# Observability / Logging
micrometer = "1.12.3"
logback = "1.5.20"
logstash = "7.4"
micrometerTracing = "1.2.5"
otel = "1.41.0"
slf4j = "2.0.17"

# Testing
junit = "5.10.2"
kotest = "5.8.0"
mockk = "1.13.10"
coroutines = "1.10.2"
testcontainers = "1.19.7"

# DI
koin = "3.5.6"

[libraries]
# Kotlinx
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }

# Ktor
ktor-server-core                 = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty                = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-content-negotiation  = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json  = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-cors                 = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-auth                 = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-status-pages         = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-compression          = { module = "io.ktor:ktor-server-compression", version.ref = "ktor" }
ktor-server-default-headers      = { module = "io.ktor:ktor-server-default-headers", version.ref = "ktor" }
ktor-server-test-host            = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-server-double-receive       = { module = "io.ktor:ktor-server-double-receive", version.ref = "ktor" }
ktor-server-call-logging         = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-call-id              = { module = "io.ktor:ktor-server-call-id", version.ref = "ktor" }
ktor-server-metrics-micrometer   = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktor" }
ktor-server-host-common          = { module = "io.ktor:ktor-server-host-common", version.ref = "ktor" }
ktor-client-core                 = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio                  = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation  = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging              = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }

# Telegram
pengrad-telegram = { module = "com.github.pengrad:java-telegram-bot-api", version = "9.2.0" }

# Exposed
exposed-core       = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-dao        = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-jdbc       = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }

# DB pool
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }

# Flyway + Postgres (ВАЖНО: модуль flyway-database-postgresql для PG16+)
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-pg   = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
postgres    = { module = "org.postgresql:postgresql", version.ref = "postgres" }

# Extra DB
h2 = { module = "com.h2database:h2", version.ref = "h2" }

# Observability
micrometer-core               = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-prometheus         = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
micrometer-tracing-bridge-otel= { module = "io.micrometer:micrometer-tracing-bridge-otel", version.ref = "micrometerTracing" }
opentelemetry-sdk             = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "otel" }
opentelemetry-exporter-otlp   = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "otel" }
opentelemetry-sdk-testing     = { module = "io.opentelemetry:opentelemetry-sdk-testing", version.ref = "otel" }

# Logging
logback         = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logstash-encoder= { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash" }
slf4j-api       = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

# Coroutines integrations
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "coroutines" }

# DI
koin-core        = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-ktor        = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koin-logger-slf4j= { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }

# Testing
junit-jupiter        = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-jupiter-api    = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
kotest-runner        = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions    = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
mockk                = { module = "io.mockk:mockk", version.ref = "mockk" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
testcontainers-junit     = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql= { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

[plugins]
kotlin-jvm           = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }